import React, { useEffect, useRef } from 'react';
import { X, AlertTriangle } from 'lucide-react';

interface BottomSheetProps {
    isOpen: boolean;
    onClose: () => void;
    onConfirm: () => void;
    title: string;
    children: React.ReactNode;
}

const BottomSheet: React.FC<BottomSheetProps> = ({ isOpen, onClose, onConfirm, title, children }) => {
    const sheetRef = useRef<HTMLDivElement>(null);

    useEffect(() => {
        const handleKeyDown = (event: KeyboardEvent) => {
            if (event.key === 'Escape') {
                onClose();
            }
        };

        if (isOpen) {
            document.body.style.overflow = 'hidden';
            document.addEventListener('keydown', handleKeyDown);
            sheetRef.current?.focus();
        } else {
            document.body.style.overflow = '';
        }

        return () => {
            document.body.style.overflow = '';
            document.removeEventListener('keydown', handleKeyDown);
        };
    }, [isOpen, onClose]);

    return (
        <div
            className={`fixed inset-0 z-40 transition-opacity duration-300 ease-in-out ${isOpen ? 'bg-black bg-opacity-50' : 'bg-opacity-0 pointer-events-none'}`}
            onClick={onClose}
            role="dialog"
            aria-modal="true"
            aria-labelledby="sheet-title"
        >
            <div
                ref={sheetRef}
                tabIndex={-1}
                onClick={(e) => e.stopPropagation()}
                className={`fixed bottom-0 left-0 right-0 z-50 bg-white rounded-t-2xl shadow-2xl transition-transform duration-300 ease-in-out transform ${isOpen ? 'translate-y-0' : 'translate-y-full'}`}
                style={{ willChange: 'transform' }}
            >
                <div className="p-4 sm:p-6">
                    <div className="flex items-start justify-between mb-4">
                        <div className="flex items-center gap-4">
                             <div className="flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100">
                                <AlertTriangle className="h-6 w-6 text-red-600" aria-hidden="true" />
                            </div>
                            <h2 id="sheet-title" className="text-xl font-bold text-gray-900">{title}</h2>
                        </div>
                        <button
                            onClick={onClose}
                            className="p-1 text-gray-400 rounded-full hover:bg-gray-100 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                            aria-label="Закрыть"
                        >
                            <X className="h-6 w-6" />
                        </button>
                    </div>

                    <div className="text-base text-gray-600">
                        {children}
                    </div>

                    <div className="mt-6 flex flex-col gap-3">
                        <button
                            type="button"
                            onClick={onConfirm}
                            className="w-full px-6 py-3 text-base font-semibold rounded-lg transition-all shadow-md bg-red-600 text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
                        >
                            Подтвердить
                        </button>
                        <button
                            type="button"
                            onClick={onClose}
                            className="w-full px-6 py-3 text-base font-semibold rounded-lg transition-all bg-gray-100 text-gray-700 hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                        >
                            Отмена
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default BottomSheet;

import React, { useCallback, useState } from 'react';
import TextInput from './TextInput';
import { X } from 'lucide-react';

interface CheckboxGroupProps {
    label: string;
    name: string;
    options: string[];
    selectedOptions: string[];
    onChange: (name: string, selected: string[]) => void;
    conditionalField?: {
        trigger: string;
        label: string;
        name: string;
        value: string;
        onChange: (name: string, value: string) => void;
        required?: boolean;
        placeholder?: string;
    };
    maxSelections?: number;
    error?: string;
    helperText?: string;
    customOptions?: string[];
    onAddCustomOption?: (option: string) => void;
    onRemoveCustomOption?: (option: string) => void;
}

const CheckboxGroup: React.FC<CheckboxGroupProps> = ({
    label,
    name,
    options,
    selectedOptions,
    onChange,
    conditionalField,
    maxSelections,
    error,
    helperText,
    customOptions = [],
    onAddCustomOption,
    onRemoveCustomOption,
}) => {
    const [customValue, setCustomValue] = useState('');

    const handleToggle = useCallback((option: string) => {
        const isSelected = selectedOptions.includes(option);
        if (!isSelected && maxSelections && selectedOptions.length >= maxSelections) {
            return;
        }

        const newSelected = isSelected
            ? selectedOptions.filter(item => item !== option)
            : [...selectedOptions, option];
        onChange(name, newSelected);
    }, [name, onChange, selectedOptions, maxSelections]);

    const handleAddCustom = useCallback(() => {
        if (customValue.trim() && onAddCustomOption) {
            onAddCustomOption(customValue.trim());
            setCustomValue('');
        }
    }, [customValue, onAddCustomOption]);
    
    const handleRemoveCustom = useCallback((option: string) => {
        if (onRemoveCustomOption) {
            onRemoveCustomOption(option);
        }
    }, [onRemoveCustomOption]);

    const checkmarkSvg = "data:image/svg+xml,%3csvg viewBox='0 0 24 24' fill='white' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='m9.707 19.121c-.187.188-.442.293-.707.293s-.52-.105-.707-.293l-5.646-5.647c-.586-.586-.586-1.536 0-2.121l.707-.707c.586-.586 1.535-.586 2.121 0l3.525 3.525 9.525-9.525c.586-.586 1.536-.586 2.121 0l.707.707c.586.586.586 1.536 0 2.121z'/%3e%3c/svg%3e";
    const showCustomInput = selectedOptions.includes('Другое');

    const renderCheckbox = (option: string, isCustom = false) => {
        const isChecked = selectedOptions.includes(option);
        const isLimitReached = maxSelections !== undefined && selectedOptions.length >= maxSelections;
        const isDisabled = !isChecked && isLimitReached;

        return (
            <div key={option} className={`flex items-start ${isCustom ? 'justify-between' : ''}`}>
                <label htmlFor={`checkbox-${label}-${option}`} className={`flex items-start flex-grow ${isDisabled ? 'cursor-not-allowed' : 'cursor-pointer'}`}>
                    <input
                        id={`checkbox-${label}-${option}`}
                        type="checkbox"
                        checked={isChecked}
                        onChange={() => handleToggle(option)}
                        disabled={isDisabled}
                        className={`appearance-none h-5 w-5 border rounded-sm bg-white mt-0.5
                                   shrink-0
                                   transition duration-150 ease-in-out
                                   ${isDisabled
                                        ? 'border-gray-300 bg-gray-100'
                                        : `border-gray-400 checked:bg-blue-600 checked:border-transparent 
                                           focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500`
                                    }`}
                        style={!isDisabled ? { backgroundImage: `url("${checkmarkSvg}")`, backgroundPosition: 'center', backgroundRepeat: 'no-repeat', backgroundSize: '100%' } : {}}
                    />
                    <span className={`ml-3 text-base font-medium ${isDisabled ? 'text-gray-400' : 'text-gray-700'}`}>{option}</span>
                </label>
                {isCustom && (
                    <button
                        type="button"
                        onClick={() => handleRemoveCustom(option)}
                        className="p-1 text-gray-400 hover:text-red-500 hover:bg-red-100 rounded-full transition-colors ml-2 shrink-0"
                        aria-label={`Удалить опцию ${option}`}
                    >
                        <X className="h-4 w-4" />
                    </button>
                )}
            </div>
        );
    };

    return (
        <div>
            <label className={`block text-base font-semibold text-gray-800 ${maxSelections || helperText ? 'mb-1' : 'mb-3'}`}>{label}</label>
            {helperText ? (
                <p className="text-sm text-gray-500 mb-3">{helperText}</p>
            ) : maxSelections ? (
                 <p className="text-sm text-gray-500 mb-3">Выберите не более {maxSelections} вариантов. ({selectedOptions.length}/{maxSelections})</p>
            ) : null}

            <div className="flex flex-col gap-3">
                {options.map(option => renderCheckbox(option))}
                {customOptions.map(option => renderCheckbox(option, true))}
            </div>

            {showCustomInput && (
                <div className="mt-4 flex items-center gap-2">
                    <div className="flex-grow">
                        <TextInput 
                            name={`${name}CustomInput`}
                            value={customValue}
                            onChange={(_, val) => setCustomValue(val)}
                            placeholder="Введите свой вариант..."
                        />
                    </div>
                    <button
                        type="button"
                        onClick={handleAddCustom}
                        disabled={!customValue.trim()}
                        className="px-6 py-3 text-base font-semibold rounded-lg transition-all shadow-sm bg-blue-600 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:bg-gray-400 disabled:cursor-not-allowed"
                    >
                        Добавить
                    </button>
                </div>
            )}
            
            {conditionalField && selectedOptions.includes(conditionalField.trigger) && (
                 <div className="mt-3">
                    <TextInput
                        label={conditionalField.label}
                        name={conditionalField.name}
                        value={conditionalField.value}
                        onChange={conditionalField.onChange}
                        required={conditionalField.required}
                        placeholder={conditionalField.placeholder}
                    />
                 </div>
            )}
            {error && <p className="mt-2 text-sm text-red-600">{error}</p>}
        </div>
    );
};

export default React.memo(CheckboxGroup);
import React, { useEffect, useRef } from 'react';
import { X, AlertTriangle } from 'lucide-react';

interface ConfirmationModalProps {
    isOpen: boolean;
    onClose: () => void;
    onConfirm: () => void;
    title: string;
    children: React.ReactNode;
}

const ConfirmationModal: React.FC<ConfirmationModalProps> = ({ isOpen, onClose, onConfirm, title, children }) => {
    const modalRef = useRef<HTMLDivElement>(null);

    useEffect(() => {
        const handleKeyDown = (event: KeyboardEvent) => {
            if (event.key === 'Escape') {
                onClose();
            }
        };

        if (isOpen) {
            document.addEventListener('keydown', handleKeyDown);
            modalRef.current?.focus();
        }

        return () => {
            document.removeEventListener('keydown', handleKeyDown);
        };
    }, [isOpen, onClose]);

    if (!isOpen) {
        return null;
    }

    return (
        <div 
            className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 backdrop-blur-sm"
            role="dialog"
            aria-modal="true"
            aria-labelledby="modal-title"
        >
            <div 
                ref={modalRef}
                tabIndex={-1}
                className="bg-white rounded-xl shadow-2xl w-full max-w-md m-4 p-6 sm:p-8 transform transition-all"
            >
                <div className="flex items-start justify-between">
                    <div className="flex items-center gap-4">
                        <div className="flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100">
                            <AlertTriangle className="h-6 w-6 text-red-600" aria-hidden="true" />
                        </div>
                        <h2 id="modal-title" className="text-xl font-bold text-gray-900">{title}</h2>
                    </div>
                    <button 
                        onClick={onClose} 
                        className="p-1 text-gray-400 rounded-full hover:bg-gray-100 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                        aria-label="Закрыть"
                    >
                        <X className="h-6 w-6" />
                    </button>
                </div>
                
                <div className="mt-4 text-base text-gray-600">
                    {children}
                </div>

                <div className="mt-8 flex flex-col-reverse sm:flex-row sm:justify-end sm:gap-4">
                    <button
                        type="button"
                        onClick={onClose}
                        className="w-full sm:w-auto mt-3 sm:mt-0 px-6 py-2.5 text-base font-semibold rounded-lg transition-all shadow-sm bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                    >
                        Отмена
                    </button>
                    <button
                        type="button"
                        onClick={onConfirm}
                        className="w-full sm:w-auto px-6 py-2.5 text-base font-semibold rounded-lg transition-all shadow-md bg-red-600 text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
                    >
                        Подтвердить
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ConfirmationModal;
import React, { useCallback } from 'react';

interface DateInputProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'onChange' | 'onBlur'> {
    label: string;
    name: string;
    id?: string;
    error?: string;
    required?: boolean;
    value: string | number | readonly string[] | undefined;
    onChange: (name: string, value: string) => void;
    onBlur?: (name: string) => void;
}

const DateInput: React.FC<DateInputProps> = ({ label, name, id, error, required, value, onChange, onBlur, ...props }) => {

    const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
        let val = e.target.value.replace(/\D/g, '');
        if (val.length > 8) val = val.slice(0, 8);

        if (val.length > 4) {
            val = `${val.slice(0, 2)}.${val.slice(2, 4)}.${val.slice(4)}`;
        } else if (val.length > 2) {
            val = `${val.slice(0, 2)}.${val.slice(2)}`;
        }
        
        onChange(name, val);
    }, [name, onChange]);

    const handleBlur = useCallback(() => {
        if (onBlur) {
            onBlur(name);
        }
    }, [name, onBlur]);

    const inputClasses = `
        w-full px-4 py-3 border rounded-md shadow-sm bg-white
        text-gray-900 placeholder-gray-400
        focus:outline-none focus:ring-2
        ${error ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-blue-500 focus:border-blue-500'}
        transition duration-150 ease-in-out text-base
    `;

    return (
        <div>
            <label htmlFor={id || name} className="block text-base font-semibold text-gray-800 mb-2">
                {label} {required && <span className="text-red-500">*</span>}
            </label>
            <input
                id={id || name}
                name={name}
                type="text"
                className={inputClasses}
                value={value}
                onChange={handleChange}
                onBlur={handleBlur}
                placeholder="ДД.ММ.ГГГГ"
                maxLength={10}
                {...props}
            />
            {error && <p className="mt-2 text-sm text-red-600">{error}</p>}
        </div>
    );
};

export default React.memo(DateInput);import React from 'react';

interface EmptyStatePlaceholderProps {
    imageUrl: string;
}

const EmptyStatePlaceholder: React.FC<EmptyStatePlaceholderProps> = ({ imageUrl }) => {
    return (
        <div className="flex items-start justify-center rounded-lg mb-6">
             <img 
                src={imageUrl} 
                alt="Иллюстрация" 
                className="max-w-md w-full h-auto object-contain"
            />
        </div>
    );
};

export default EmptyStatePlaceholder;import React, { useState, useEffect, useMemo, useRef } from 'react';
import { X, Check, Search } from 'lucide-react';

interface MobileSelectProps {
    isOpen: boolean;
    onClose: () => void;
    options: string[];
    selectedOption: string;
    onSelect: (option: string) => void;
    title: string;
    isSearchable?: boolean;
}

const MobileSelect: React.FC<MobileSelectProps> = ({ isOpen, onClose, options, selectedOption, onSelect, title, isSearchable = false }) => {
    const [searchTerm, setSearchTerm] = useState('');
    const listRef = useRef<HTMLUListElement>(null);
    const inputRef = useRef<HTMLInputElement>(null);

    const filteredOptions = useMemo(() => {
        if (!isSearchable || !searchTerm) {
            return options;
        }
        return options.filter(option =>
            option.toLowerCase().includes(searchTerm.toLowerCase())
        );
    }, [options, searchTerm, isSearchable]);

    useEffect(() => {
        if (isOpen) {
            document.body.style.overflow = 'hidden';
            // Reset search term and scroll position when opening
            setSearchTerm('');
            setTimeout(() => {
                listRef.current?.scrollTo(0, 0);
                if (isSearchable) {
                    inputRef.current?.focus();
                }
            }, 100); // Allow time for transition
        } else {
            document.body.style.overflow = '';
        }

        return () => {
            document.body.style.overflow = '';
        };
    }, [isOpen, isSearchable]);
    
    const handleSelect = (option: string) => {
        onSelect(option);
    };

    return (
        <div
            className={`fixed inset-0 z-50 flex flex-col bg-white transition-transform duration-300 ease-in-out ${isOpen ? 'translate-y-0' : 'translate-y-full'}`}
            role="dialog"
            aria-modal="true"
            aria-labelledby="mobile-select-title"
        >
            <header className="flex items-center justify-between p-4 border-b border-gray-200 sticky top-0 bg-white z-10 shrink-0">
                <h2 id="mobile-select-title" className="text-lg font-bold text-gray-900 truncate">
                    {title}
                </h2>
                <button
                    onClick={onClose}
                    className="p-2 text-gray-500 rounded-full hover:bg-gray-100 hover:text-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                    aria-label="Закрыть"
                >
                    <X className="h-6 w-6" />
                </button>
            </header>

            {isSearchable && (
                <div className="p-4 border-b border-gray-200 sticky top-[65px] bg-white z-10 shrink-0">
                    <div className="relative">
                        <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
                        <input
                            ref={inputRef}
                            type="text"
                            placeholder="Поиск..."
                            className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg bg-gray-50 text-gray-900 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-150 ease-in-out text-base"
                            value={searchTerm}
                            onChange={e => setSearchTerm(e.target.value)}
                        />
                    </div>
                </div>
            )}

            <ul ref={listRef} className="flex-grow overflow-y-auto p-2">
                {filteredOptions.length > 0 ? (
                    filteredOptions.map(option => (
                        <li key={option}>
                            <button
                                onClick={() => handleSelect(option)}
                                className="w-full flex items-center justify-between text-left px-4 py-3.5 rounded-lg text-gray-800 hover:bg-gray-100"
                                role="option"
                                aria-selected={selectedOption === option}
                            >
                                <span className="text-base">{option}</span>
                                {selectedOption === option && <Check className="h-5 w-5 text-blue-600" />}
                            </button>
                        </li>
                    ))
                ) : (
                    <li className="px-4 py-8 text-center text-gray-500">
                        Ничего не найдено
                    </li>
                )}
            </ul>
        </div>
    );
};

export default MobileSelect;import React, { useCallback } from 'react';

interface NumberInputProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'onChange' | 'onBlur'> {
    label: string;
    name: string;
    id?: string;
    error?: string;
    required?: boolean;
    value: string | number | readonly string[] | undefined;
    onChange: (name: string, value: string) => void;
    onBlur?: (name: string) => void;
}

const NumberInput: React.FC<NumberInputProps> = ({ label, name, id, error, required, value, onChange, onBlur, ...props }) => {
    
    const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
        const val = e.target.value;
        // Allow only digits
        if (/^\d*$/.test(val)) {
            onChange(name, val);
        }
    }, [name, onChange]);

    const handleBlur = useCallback(() => {
        if (onBlur) {
            onBlur(name);
        }
    }, [name, onBlur]);
    
    const inputClasses = `
        w-full px-4 py-3 border rounded-md shadow-sm bg-white
        text-gray-900 placeholder-gray-400 
        focus:outline-none focus:ring-2
        ${error ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-blue-500 focus:border-blue-500'}
        transition duration-150 ease-in-out text-base
    `;

    return (
        <div>
            <label htmlFor={id || name} className="block text-base font-semibold text-gray-800 mb-2">
                {label} {required && <span className="text-red-500">*</span>}
            </label>
            <input
                id={id || name}
                name={name}
                type="text"
                inputMode="numeric"
                pattern="[0-9]*"
                className={inputClasses}
                value={value}
                onChange={handleChange}
                onBlur={handleBlur}
                {...props}
            />
            {error && <p className="mt-2 text-sm text-red-600">{error}</p>}
        </div>
    );
};

export default React.memo(NumberInput);import React, { useCallback } from 'react';

interface RadioGroupProps {
    label: string;
    name: string;
    options: string[];
    selected: string;
    onChange: (name: string, value: string) => void;
}

const RadioGroup: React.FC<RadioGroupProps> = ({ label, name, options, selected, onChange }) => {
    const handleChange = useCallback((value: string) => {
        onChange(name, value);
    }, [name, onChange]);
    
    return (
        <div>
            <label className="block text-base font-semibold text-gray-800 mb-3">{label}</label>
            <div className="flex flex-wrap gap-3">
                {options.map(option => (
                    <button
                        key={option}
                        type="button"
                        onClick={() => handleChange(option)}
                        className={`
                            px-5 py-2.5 text-base font-medium rounded-md border
                            transition-colors duration-150
                            ${selected === option 
                                ? 'bg-blue-600 text-white border-blue-600 shadow-sm' 
                                : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'
                            }
                        `}
                    >
                        {option}
                    </button>
                ))}
            </div>
        </div>
    );
};

export default React.memo(RadioGroup);import React, { useState, useEffect, useRef, useCallback } from 'react';
// FIX: Changed import from 'react-dom/client' to 'react-dom' to correctly use createPortal.
import ReactDOM from 'react-dom';
import { ChevronDown } from 'lucide-react';
import MobileSelect from './MobileSelect';

interface SearchableSelectProps {
    label: string;
    name: string;
    id?: string;
    options: string[];
    selected: string;
    onChange: (name: string, value: string) => void;
    onBlur?: (name: string) => void;
    error?: string;
    required?: boolean;
}

const SearchableSelect: React.FC<SearchableSelectProps> = ({ label, name, id, options, selected, onChange, onBlur, error, required }) => {
    const [isOpen, setIsOpen] = useState(false);
    const [searchTerm, setSearchTerm] = useState('');
    const wrapperRef = useRef<HTMLDivElement>(null);
    const dropdownRef = useRef<HTMLDivElement>(null);
    const [isMobile, setIsMobile] = useState(window.innerWidth < 1024);

     useEffect(() => {
        const checkIsMobile = () => {
            setIsMobile(window.innerWidth < 1024);
        };
        window.addEventListener('resize', checkIsMobile);
        return () => window.removeEventListener('resize', checkIsMobile);
    }, []);

    const filteredOptions = options.filter(option =>
        option.toLowerCase().includes(searchTerm.toLowerCase())
    );

    const handleBlur = useCallback(() => {
        if (onBlur) {
            onBlur(name);
        }
    }, [name, onBlur]);

    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            if (wrapperRef.current && !wrapperRef.current.contains(event.target as Node)) {
                if (isOpen) {
                    setIsOpen(false);
                    handleBlur();
                }
            }
        };
        if (!isMobile) {
            document.addEventListener('mousedown', handleClickOutside);
        }
        return () => {
            if (!isMobile) {
                document.removeEventListener('mousedown', handleClickOutside);
            }
        };
    }, [isOpen, handleBlur, wrapperRef, isMobile]);

    useEffect(() => {
        if (isOpen && !isMobile && dropdownRef.current) {
            const dropdownRect = dropdownRef.current.getBoundingClientRect();
            // If dropdown bottom is below the viewport, scroll down to make it fully visible.
            if (dropdownRect.bottom > window.innerHeight) {
                dropdownRef.current.scrollIntoView({ behavior: 'smooth', block: 'end' });
            }
        }
    }, [isOpen, isMobile]);

    const handleSelect = (option: string) => {
        onChange(name, option);
        setSearchTerm('');
        setIsOpen(false);
        // FIX: Removed onBlur call. The parent's onChange handler now correctly
        // re-validates the field if it was already touched, clearing the error.
        // Calling onBlur here caused a race condition where validation ran on stale state.
    };

    const handleToggle = () => {
        const willBeOpen = !isOpen;
        setIsOpen(willBeOpen);
        if (!willBeOpen) {
            handleBlur();
        }
    };
    
    const handleMobileClose = () => {
        setIsOpen(false);
        handleBlur();
    };

    const portalRoot = document.getElementById('root');

    if (isMobile && portalRoot) {
        return (
             <>
                <label htmlFor={id || name} className="block text-base font-semibold text-gray-800 mb-2">
                    {label} {required && <span className="text-red-500">*</span>}
                </label>
                <button
                    id={id || name}
                    type="button"
                    onClick={() => setIsOpen(true)}
                    className={`w-full px-4 py-3 text-left bg-white border rounded-md shadow-sm flex justify-between items-center text-base
                    focus:outline-none focus:ring-2 ${error ? 'border-red-500 ring-red-500' : 'border-gray-300 ring-blue-500 focus:border-blue-500'}`}
                >
                    <span className={selected ? 'text-gray-900' : 'text-gray-500'}>
                        {selected || 'Выберите...'}
                    </span>
                    <ChevronDown className="h-5 w-5 text-gray-400" />
                </button>
                {error && <p className="mt-2 text-sm text-red-600">{error}</p>}
                {isOpen && ReactDOM.createPortal(
                    <MobileSelect
                        isOpen={isOpen}
                        onClose={handleMobileClose}
                        options={options}
                        selectedOption={selected}
                        onSelect={handleSelect}
                        title={label}
                        isSearchable
                    />,
                    portalRoot
                )}
            </>
        );
    }


    return (
        <div ref={wrapperRef} className="relative">
            <label htmlFor={id || name} className="block text-base font-semibold text-gray-800 mb-2">
                {label} {required && <span className="text-red-500">*</span>}
            </label>
            <div>
                <button
                    id={id || name}
                    type="button"
                    onClick={handleToggle}
                    className={`w-full px-4 py-3 text-left bg-white border rounded-md shadow-sm flex justify-between items-center text-base
                    focus:outline-none focus:ring-2 ${error ? 'border-red-500 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500 focus:border-blue-500'}`}
                >
                    <span className={selected ? 'text-gray-900' : 'text-gray-500'}>
                        {selected || 'Выберите...'}
                    </span>
                    <ChevronDown className={`h-5 w-5 text-gray-400 transition-transform ${isOpen ? 'transform rotate-180' : ''}`} />
                </button>
                {isOpen && (
                    <div ref={dropdownRef} className="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg max-h-60 overflow-y-auto">
                        <div className="p-2">
                            <input
                                type="text"
                                placeholder="Поиск..."
                                className="w-full px-3 py-2 border border-gray-300 rounded-md bg-white text-gray-900 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-150 ease-in-out"
                                value={searchTerm}
                                onChange={e => setSearchTerm(e.target.value)}
                                autoFocus
                            />
                        </div>
                        <ul>
                            {filteredOptions.length > 0 ? filteredOptions.map(option => (
                                <li
                                    key={option}
                                    onClick={() => handleSelect(option)}
                                    className={`px-4 py-2 cursor-pointer text-gray-900 ${selected === option ? 'bg-blue-600 text-white' : 'hover:bg-blue-100'}`}
                                >
                                    {option}
                                </li>
                            )) : <li className="px-4 py-2 text-gray-500">Не найдено</li>}
                        </ul>
                    </div>
                )}
            </div>
             {error && <p className="mt-2 text-sm text-red-600">{error}</p>}
        </div>
    );
};

export default React.memo(SearchableSelect);import React, { useState, useRef, useEffect, useCallback } from 'react';
// FIX: Changed import from 'react-dom/client' to 'react-dom' to correctly use createPortal.
import ReactDOM from 'react-dom';
import { ChevronDown, X, Check } from 'lucide-react';
import MobileSelect from './MobileSelect';

interface SelectProps {
    label: string;
    name: string;
    id?: string;
    options: string[];
    selected: string;
    onChange: (name: string, value: string) => void;
    required?: boolean;
    error?: string;
    onBlur?: (name: string) => void;
}

const Select: React.FC<SelectProps> = ({ label, name, id, options, selected, onChange, required, error, onBlur }) => {
    const [isOpen, setIsOpen] = useState(false);
    const wrapperRef = useRef<HTMLDivElement>(null);
    const dropdownRef = useRef<HTMLDivElement>(null);
    const [isMobile, setIsMobile] = useState(window.innerWidth < 1024);

    useEffect(() => {
        const checkIsMobile = () => {
            setIsMobile(window.innerWidth < 1024);
        };
        window.addEventListener('resize', checkIsMobile);
        return () => window.removeEventListener('resize', checkIsMobile);
    }, []);

    const handleBlur = useCallback(() => {
        if (onBlur) {
            onBlur(name);
        }
    }, [name, onBlur]);

    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            if (wrapperRef.current && !wrapperRef.current.contains(event.target as Node)) {
                if (isOpen) {
                    setIsOpen(false);
                    handleBlur();
                }
            }
        };
        if (!isMobile) {
            document.addEventListener('mousedown', handleClickOutside);
        }
        return () => {
            if (!isMobile) {
                document.removeEventListener('mousedown', handleClickOutside);
            }
        };
    }, [isOpen, handleBlur, wrapperRef, isMobile]);
    
    useEffect(() => {
        if (isOpen && !isMobile && dropdownRef.current) {
            const dropdownRect = dropdownRef.current.getBoundingClientRect();
            // If dropdown bottom is below the viewport, scroll down to make it fully visible.
            if (dropdownRect.bottom > window.innerHeight) {
                dropdownRef.current.scrollIntoView({ behavior: 'smooth', block: 'end' });
            }
        }
    }, [isOpen, isMobile]);

    const handleSelect = (option: string) => {
        onChange(name, option);
        setIsOpen(false);
        // FIX: Removed onBlur call. The parent's onChange handler now correctly
        // re-validates the field if it was already touched, clearing the error.
        // Calling onBlur here caused a race condition where validation ran on stale state.
    };
    
    const handleToggle = () => {
        if (isMobile) {
            setIsOpen(true);
            return;
        }

        const willBeOpen = !isOpen;
        setIsOpen(willBeOpen);
        if (!willBeOpen) {
            handleBlur();
        }
    };

    const handleMobileClose = () => {
        setIsOpen(false);
        handleBlur();
    };

    const portalRoot = document.getElementById('root');

    if (isMobile && portalRoot) {
        return (
            <>
                <label htmlFor={id || name} className="block text-base font-semibold text-gray-800 mb-2">
                    {label} {required && <span className="text-red-500">*</span>}
                </label>
                <button
                    id={id || name}
                    type="button"
                    onClick={handleToggle}
                    className={`w-full px-4 py-3 text-left bg-white border rounded-md shadow-sm flex justify-between items-center text-base
                    focus:outline-none focus:ring-2 ${error ? 'border-red-500 ring-red-500' : 'border-gray-300 ring-blue-500 focus:border-blue-500'}`}
                >
                    <span className={selected ? 'text-gray-900' : 'text-gray-500'}>
                        {selected || 'Выберите...'}
                    </span>
                    <ChevronDown className="h-5 w-5 text-gray-400" />
                </button>
                {error && <p className="mt-2 text-sm text-red-600">{error}</p>}
                {isOpen && ReactDOM.createPortal(
                    <MobileSelect
                        isOpen={isOpen}
                        onClose={handleMobileClose}
                        options={options}
                        selectedOption={selected}
                        onSelect={handleSelect}
                        title={label}
                    />,
                    portalRoot
                )}
            </>
        );
    }

    return (
        <div ref={wrapperRef} className="relative">
            <label htmlFor={id || name} className="block text-base font-semibold text-gray-800 mb-2">
                {label} {required && <span className="text-red-500">*</span>}
            </label>
            <button
                id={id || name}
                type="button"
                onClick={handleToggle}
                className={`w-full px-4 py-3 text-left bg-white border rounded-md shadow-sm flex justify-between items-center text-base
                focus:outline-none focus:ring-2 ${error ? 'border-red-500 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500 focus:border-blue-500'}`}
            >
                <span className={selected ? 'text-gray-900' : 'text-gray-500'}>
                    {selected || 'Выберите...'}
                </span>
                <ChevronDown className={`h-5 w-5 text-gray-400 transition-transform ${isOpen ? 'transform rotate-180' : ''}`} />
            </button>
            {isOpen && (
                <div ref={dropdownRef} className="absolute z-10 w-full bg-white border border-gray-300 rounded-md shadow-lg max-h-60 overflow-y-auto mt-1">
                    <ul>
                        {options.map(option => (
                            <li
                                key={option}
                                onClick={() => handleSelect(option)}
                                className={`px-4 py-2 cursor-pointer text-gray-900 ${selected === option ? 'bg-blue-600 text-white' : 'hover:bg-blue-100'}`}
                            >
                                {option}
                            </li>
                        ))}
                    </ul>
                </div>
            )}
            {error && <p className="mt-2 text-sm text-red-600">{error}</p>}
        </div>
    );
};

export default React.memo(Select);import React, { useCallback } from 'react';

interface TextInputProps extends Omit<React.InputHTMLAttributes<HTMLInputElement | HTMLTextAreaElement>, 'onChange' | 'onBlur'> {
    label?: string;
    name: string;
    id?: string;
    error?: string;
    required?: boolean;
    format?: 'capitalizeName';
    type?: 'text' | 'email' | 'tel' | 'url' | 'textarea';
    value: string | number | readonly string[] | undefined;
    onChange: (name: string, value: string) => void;
    onBlur?: (name: string) => void;
}

const TextInput: React.FC<TextInputProps> = ({ label, name, id, error, required, format, type = 'text', value, onChange, onBlur, ...props }) => {
    const formatValue = (val: string) => {
        if (format === 'capitalizeName' && val) {
            return val.charAt(0).toUpperCase() + val.slice(1).toLowerCase();
        }
        return val;
    };

    const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        const formattedValue = formatValue(e.target.value);
        onChange(name, formattedValue);
    }, [name, onChange, format]);
    
    const handleBlur = useCallback(() => {
        if (onBlur) {
            onBlur(name);
        }
    }, [name, onBlur]);

    const inputClasses = `
        w-full px-4 py-3 border rounded-md shadow-sm bg-white
        text-gray-900 placeholder-gray-400 
        focus:outline-none focus:ring-2
        ${error ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-blue-500 focus:border-blue-500'}
        transition duration-150 ease-in-out text-base
    `;

    return (
        <div>
            {label && (
                <label htmlFor={id || name} className="block text-base font-semibold text-gray-800 mb-2">
                    {label} {required && <span className="text-red-500">*</span>}
                </label>
            )}
            {type === 'textarea' ? (
                <textarea
                    id={id || name}
                    name={name}
                    className={`${inputClasses} min-h-[100px]`}
                    value={value}
                    onChange={handleChange}
                    onBlur={handleBlur}
                    {...props as React.TextareaHTMLAttributes<HTMLTextAreaElement>}
                />
            ) : (
                <input
                    id={id || name}
                    name={name}
                    type={type}
                    className={inputClasses}
                    value={value}
                    onChange={handleChange}
                    onBlur={handleBlur}
                    {...props as React.InputHTMLAttributes<HTMLInputElement>}
                />
            )}
            {error && <p className="mt-2 text-sm text-red-600">{error}</p>}
        </div>
    );
};

export default React.memo(TextInput);