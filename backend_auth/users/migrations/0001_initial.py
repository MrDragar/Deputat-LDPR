# Generated by Django 5.1.3 on 2025-10-13 08:23

import django.db.models.deletion
import users.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
                ('login', models.CharField(blank=True, max_length=50, null=True, unique=True, verbose_name='Логин')),
                ('password', models.CharField(blank=True, max_length=100, null=True, verbose_name='Пароль')),
                ('is_active', models.BooleanField(default=False, verbose_name='Активный')),
                ('role', models.CharField(choices=[('deputy', 'Депутат'), ('coordinator', 'Координатор'), ('admin', 'Администратор')], default='deputy', max_length=20, verbose_name='Роль')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='Дата регистрации')),
                ('last_login', models.DateTimeField(auto_now=True, verbose_name='Последний вход')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='ldpr_user_set', related_query_name='ldpr_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='ldpr_user_permissions_set', related_query_name='ldpr_user_permissions', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
        ),
        migrations.CreateModel(
            name='RegistrationForm',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='deputy_form', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('last_name', models.CharField(max_length=255, verbose_name='Фамилия')),
                ('first_name', models.CharField(max_length=255, verbose_name='Имя')),
                ('middle_name', models.CharField(blank=True, max_length=255, verbose_name='Отчество')),
                ('gender', models.CharField(choices=[('Мужчина', 'Мужчина'), ('Женщина', 'Женщина')], max_length=10, verbose_name='Пол')),
                ('birth_date', models.DateField(verbose_name='Дата рождения')),
                ('region', models.CharField(choices=[('Алтайский край', 'Алтайский край'), ('Амурская область', 'Амурская область'), ('Архангельская область', 'Архангельская область'), ('Астраханская область', 'Астраханская область'), ('Белгородская область', 'Белгородская область'), ('Брянская область', 'Брянская область'), ('Владимирская область', 'Владимирская область'), ('Волгоградская область', 'Волгоградская область'), ('Вологодская область', 'Вологодская область'), ('Воронежская область', 'Воронежская область'), ('Донецкая Народная Республика', 'Донецкая Народная Республика'), ('Еврейская автономная область', 'Еврейская автономная область'), ('Забайкальский край', 'Забайкальский край'), ('Запорожская область', 'Запорожская область'), ('Ивановская область', 'Ивановская область'), ('Иркутская область', 'Иркутская область'), ('Кабардино-Балкарская Республика', 'Кабардино-Балкарская Республика'), ('Калининградская область', 'Калининградская область'), ('Калужская область', 'Калужская область'), ('Камчатский край', 'Камчатский край'), ('Карачаево-Черкесская Республика', 'Карачаево-Черкесская Республика'), ('Кемеровская область – Кузбасс', 'Кемеровская область – Кузбасс'), ('Кировская область', 'Кировская область'), ('Костромская область', 'Костромская область'), ('Краснодарский край', 'Краснодарский край'), ('Красноярский край', 'Красноярский край'), ('Курганская область', 'Курганская область'), ('Курская область', 'Курская область'), ('Ленинградская область', 'Ленинградская область'), ('Липецкая область', 'Липецкая область'), ('Луганская Народная Республика', 'Луганская Народная Республика'), ('Магаданская область', 'Магаданская область'), ('Москва', 'Москва'), ('Московская область', 'Московская область'), ('Мурманская область', 'Мурманская область'), ('Ненецкий автономный округ', 'Ненецкий автономный округ'), ('Нижегородская область', 'Нижегородская область'), ('Новгородская область', 'Новгородская область'), ('Новосибирская область', 'Новосибирская область'), ('Омская область', 'Омская область'), ('Оренбургская область', 'Оренбургская область'), ('Орловская область', 'Орловская область'), ('Пензенская область', 'Пензенская область'), ('Пермский край', 'Пермский край'), ('Приморский край', 'Приморский край'), ('Псковская область', 'Псковская область'), ('Республика Адыгея', 'Республика Адыгея'), ('Республика Алтай', 'Республика Алтай'), ('Республика Башкортостан', 'Республика Башкортостан'), ('Республика Бурятия', 'Республика Бурятия'), ('Республика Дагестан', 'Республика Дагестан'), ('Республика Ингушетия', 'Республика Ингушетия'), ('Республика Калмыкия', 'Республика Калмыкия'), ('Республика Карелия', 'Республика Карелия'), ('Республика Коми', 'Республика Коми'), ('Республика Крым', 'Республика Крым'), ('Республика Марий Эл', 'Республика Марий Эл'), ('Республика Мордовия', 'Республика Мордовия'), ('Республика Саха (Якутия)', 'Республика Саха (Якутия)'), ('Республика Северная Осетия – Алания', 'Республика Северная Осетия – Алания'), ('Республика Татарстан', 'Республика Татарстан'), ('Республика Тыва', 'Республика Тыва'), ('Республика Хакасия', 'Республика Хакасия'), ('Ростовская область', 'Ростовская область'), ('Рязанская область', 'Рязанская область'), ('Самарская область', 'Самарская область'), ('Санкт-Петербург', 'Санкт-Петербург'), ('Саратовская область', 'Саратовская область'), ('Сахалинская область', 'Сахалинская область'), ('Свердловская область', 'Свердловская область'), ('Севастополь', 'Севастополь'), ('Смоленская область', 'Смоленская область'), ('Ставропольский край', 'Ставропольский край'), ('Тамбовская область', 'Тамбовская область'), ('Тверская область', 'Тверская область'), ('Томская область', 'Томская область'), ('Тульская область', 'Тульская область'), ('Тюменская область', 'Тюменская область'), ('Удмуртская Республика', 'Удмуртская Республика'), ('Ульяновская область', 'Ульяновская область'), ('Хабаровский край', 'Хабаровский край'), ('Ханты-Мансийский автономный округ-Югра', 'Ханты-Мансийский автономный округ-Югра'), ('Херсонская область', 'Херсонская область'), ('Челябинская область', 'Челябинская область'), ('Чеченская Республика', 'Чеченская Республика'), ('Чувашская Республика', 'Чувашская Республика'), ('Чукотский автономный округ', 'Чукотский автономный округ'), ('Ямало-Ненецкий автономный округ', 'Ямало-Ненецкий автономный округ'), ('Ярославская область', 'Ярославская область')], max_length=255, verbose_name='Регион')),
                ('phone', models.CharField(max_length=20, verbose_name='Телефон')),
                ('email', models.EmailField(max_length=254, verbose_name='Адрес электронной почты')),
                ('vk_page', models.URLField(verbose_name='Ссылка на страницу ВКонтакте')),
                ('vk_group', models.URLField(blank=True, verbose_name='Ссылка на сообщество ВКонтакте')),
                ('telegram_channel', models.URLField(blank=True, verbose_name='Ссылка на телеграм-канал')),
                ('personal_site', models.URLField(blank=True, verbose_name='Ссылка на персональный сайт')),
                ('marital_status', models.CharField(choices=[('Женат', 'Женат'), ('Замужем', 'Замужем'), ('Не замужем', 'Не замужем'), ('Холост', 'Холост')], max_length=50, verbose_name='Семейное положение')),
                ('children_count', models.PositiveIntegerField(blank=True, null=True, verbose_name='Количество детей')),
                ('children_male_count', models.PositiveIntegerField(blank=True, null=True, verbose_name='Из них мальчиков')),
                ('children_female_count', models.PositiveIntegerField(blank=True, null=True, verbose_name='Из них девочек')),
                ('underage_children_count', models.PositiveIntegerField(blank=True, null=True, verbose_name='Количество несовершеннолетних детей')),
                ('underage_children_male_count', models.PositiveIntegerField(blank=True, null=True, verbose_name='Из них несовершеннолетних мальчиков')),
                ('underage_children_female_count', models.PositiveIntegerField(blank=True, null=True, verbose_name='Из них несовершеннолетних девочек')),
                ('party_experience', models.PositiveIntegerField(verbose_name='Стаж в партии (лет)')),
                ('party_position', models.CharField(max_length=255, verbose_name='Должность в партии')),
                ('party_role', models.CharField(max_length=255, verbose_name='Должность в региональном отделении')),
                ('representative_body_name', models.CharField(max_length=255, verbose_name='Наименование представительного органа')),
                ('representative_body_level', models.CharField(choices=[('Совет Федерации Федерального собрания Российской Федерации', 'Совет Федерации Федерального собрания Российской Федерации'), ('Государственная дума Федерального собрания Российской Федерации', 'Государственная дума Федерального собрания Российской Федерации'), ('ЗС', 'ЗС'), ('АЦС', 'АЦС'), ('МСУ', 'МСУ')], max_length=80, verbose_name='Уровень представительного органа')),
                ('representative_body_position', models.CharField(max_length=255, verbose_name='Должность в представительном органе')),
                ('committee_name', models.CharField(max_length=255, verbose_name='Название комиссии или комитета')),
                ('committee_status', models.CharField(choices=[('Член', 'Член'), ('Председатель', 'Председатель'), ('Заместитель', 'Заместитель')], max_length=50, verbose_name='Статус в комиссии или комитете')),
                ('professional_sphere', models.JSONField(blank=True, default=list, validators=[users.models.validate_list_of_strings], verbose_name='Сфера профессиональной деятельности')),
                ('awards', models.TextField(blank=True, verbose_name='Имеющиеся награды')),
                ('sports', models.JSONField(blank=True, default=list, validators=[users.models.validate_list_of_strings], verbose_name='Виды спорта')),
                ('recreation', models.JSONField(blank=True, default=list, validators=[users.models.validate_list_of_strings], verbose_name='Виды активного отдыха')),
                ('hobbies', models.JSONField(blank=True, default=list, validators=[users.models.validate_list_of_strings], verbose_name='Увлечения и интересы')),
                ('ldpr_resources', models.JSONField(blank=True, default=list, validators=[users.models.validate_list_of_strings], verbose_name='Ресурсы ЛДПР в работе')),
                ('central_office_assistant', models.TextField(blank=True, verbose_name='Помощь сотрудников Центрального аппарата')),
                ('knowledge_gaps', models.JSONField(blank=True, default=list, validators=[users.models.validate_list_of_strings], verbose_name='Недостающие знания')),
                ('additional_info', models.TextField(verbose_name='Дополнительная информация')),
                ('suggestions', models.TextField(verbose_name='Предложения по улучшению работы ЛДПР')),
                ('talents', models.TextField(verbose_name='Таланты')),
                ('knowledge_to_share', models.TextField(verbose_name='Знания, которыми готов поделиться')),
                ('superpower', models.TextField(verbose_name='СУПЕРсила')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата последнего обновления')),
            ],
            options={
                'verbose_name': 'Анкета депутата',
                'verbose_name_plural': 'Анкеты депутатов',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WorkExperience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organization', models.CharField(max_length=255, verbose_name='Название организации')),
                ('position', models.CharField(max_length=255, verbose_name='Должность')),
                ('start_date', models.CharField(max_length=50, verbose_name='Месяц и год начала работы')),
                ('form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='work_experience', to='users.registrationform', verbose_name='Анкета')),
            ],
            options={
                'verbose_name': 'Место работы',
                'verbose_name_plural': 'Места работы',
            },
        ),
        migrations.CreateModel(
            name='SocialOrganization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название организации')),
                ('position', models.CharField(max_length=255, verbose_name='Должность')),
                ('years', models.CharField(max_length=50, verbose_name='Годы участия')),
                ('form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='social_organizations', to='users.registrationform', verbose_name='Анкета')),
            ],
            options={
                'verbose_name': 'Общественная организация',
                'verbose_name_plural': 'Общественные организации',
            },
        ),
        migrations.CreateModel(
            name='RussianFederationLanguage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Татарский', 'Татарский'), ('Башкирский', 'Башкирский'), ('Чеченский', 'Чеченский'), ('Чувашский', 'Чувашский'), ('Якутский', 'Якутский'), ('Осетинский', 'Осетинский'), ('Бурятский', 'Бурятский'), ('Аварский', 'Аварский'), ('Даргинский', 'Даргинский'), ('Лакский', 'Лакский'), ('Лезгинский', 'Лезгинский'), ('Ингушский', 'Ингушский'), ('Кабардино-черкесский', 'Кабардино-черкесский'), ('Балкарский', 'Балкарский'), ('Калмыцкий', 'Калмыцкий'), ('Карачаевский', 'Карачаевский'), ('Ногайский', 'Ногайский'), ('Адыгейский', 'Адыгейский'), ('Коми', 'Коми'), ('Марийский', 'Марийский'), ('Мордовский (мокшанский, эрзянский)', 'Мордовский (мокшанский, эрзянский)'), ('Удмуртский', 'Удмуртский'), ('Тувинский', 'Тувинский'), ('Алтайский', 'Алтайский'), ('Хакасский', 'Хакасский'), ('Крымскотатарский', 'Крымскотатарский')], max_length=100, verbose_name='Язык')),
                ('level', models.CharField(choices=[('Читаю и перевожу со словарем', 'Читаю и перевожу со словарем'), ('Читаю и могу объясняться', 'Читаю и могу объясняться'), ('Свободно владею', 'Свободно владею')], max_length=100, verbose_name='Уровень владения')),
                ('form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='russian_federation_languages', to='users.registrationform', verbose_name='Анкета')),
            ],
            options={
                'verbose_name': 'Язык народов РФ',
                'verbose_name_plural': 'Языки народов РФ',
            },
        ),
        migrations.CreateModel(
            name='OtherLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(verbose_name='Ссылка')),
                ('form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='other_links', to='users.registrationform', verbose_name='Анкета')),
            ],
            options={
                'verbose_name': 'Другая ссылка',
                'verbose_name_plural': 'Другие ссылки',
            },
        ),
        migrations.CreateModel(
            name='ForeignLanguage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Английский', 'Английский'), ('Немецкий', 'Немецкий'), ('Французский', 'Французский'), ('Испанский', 'Испанский'), ('Китайский', 'Китайский'), ('Арабский', 'Арабский'), ('Японский', 'Японский'), ('Итальянский', 'Итальянский'), ('Португальский', 'Португальский'), ('Корейский', 'Корейский'), ('Турецкий', 'Турецкий'), ('Хинди', 'Хинди')], max_length=100, verbose_name='Язык')),
                ('level', models.CharField(choices=[('Читаю и перевожу со словарем', 'Читаю и перевожу со словарем'), ('Читаю и могу объясняться', 'Читаю и могу объясняться'), ('Свободно владею', 'Свободно владею')], max_length=100, verbose_name='Уровень владения')),
                ('form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='foreign_languages', to='users.registrationform', verbose_name='Анкета')),
            ],
            options={
                'verbose_name': 'Иностранный язык',
                'verbose_name_plural': 'Иностранные языки',
            },
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.CharField(choices=[('Среднее общее', 'Среднее общее'), ('Среднее профессиональное', 'Среднее профессиональное'), ('Высшее', 'Высшее')], max_length=100, verbose_name='Уровень образования')),
                ('organization', models.CharField(max_length=255, verbose_name='Название образовательной организации')),
                ('has_postgraduate', models.CharField(choices=[('Да', 'Да'), ('Нет', 'Нет')], default='Нет', max_length=3, verbose_name='Послевузовское профессиональное образование')),
                ('postgraduate_type', models.CharField(blank=True, choices=[('Аспирантура', 'Аспирантура'), ('Адъюнктура', 'Адъюнктура'), ('Докторантура', 'Докторантура')], max_length=100, verbose_name='Вид послевузовского образования')),
                ('postgraduate_organization', models.CharField(blank=True, max_length=255, verbose_name='Наименование учреждения послевузовского образования')),
                ('has_degree', models.CharField(choices=[('Да', 'Да'), ('Нет', 'Нет')], default='Нет', max_length=3, verbose_name='Наличие ученой степени')),
                ('degree_type', models.CharField(blank=True, choices=[('Кандидат наук', 'Кандидат наук'), ('Доктор наук', 'Доктор наук')], max_length=100, verbose_name='Ученая степень')),
                ('has_title', models.CharField(choices=[('Да', 'Да'), ('Нет', 'Нет')], default='Нет', max_length=3, verbose_name='Наличие ученого звания')),
                ('title_type', models.CharField(blank=True, choices=[('Доцент', 'Доцент'), ('Профессор', 'Профессор')], max_length=100, verbose_name='Ученое звание')),
                ('form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='education', to='users.registrationform', verbose_name='Анкета')),
            ],
            options={
                'verbose_name': 'Образование',
                'verbose_name_plural': 'Образование',
            },
        ),
    ]
