services:
  db_auth:
    image: postgres:17
    environment:
      POSTGRES_DB: ${DATABASE_AUTH_NAME}
      POSTGRES_USER: ${DATABASE_AUTH_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_AUTH_PASSWORD}
    command: postgres -c listen_addresses='*'
    volumes:
      - postgres_data_auth:/var/lib/postgresql/data
    env_file:
      - .env
    networks:
      - app_network

  # Redis как брокер для Celery
  redis:
    image: redis:7-alpine
    container_name: celery_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app_network
    restart: unless-stopped

  backend_auth:
    build: ./backend_auth
    container_name: backend_auth
    ports:
      - "8000:8000"
    environment:
      REDIS_URL: "redis://redis:6379/0"
      SECRET_KEY: ${DJANGO_SECRET_KEY}
      DEBUG: ${DEBUG}
      LOGLEVEL: ${DJANGO_LOGLEVEL}
      ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
      
      DATABASE_ENGINE: ${DATABASE_ENGINE}
      DATABASE_NAME: ${DATABASE_AUTH_NAME}
      DATABASE_USERNAME: ${DATABASE_AUTH_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_AUTH_PASSWORD}
      DATABASE_HOST: db_auth
      DATABASE_PORT: ${DATABASE_AUTH_PORT}
    env_file:
      - .env
    depends_on:
      - redis
      - db_auth
    networks:
      - app_network
    restart: unless-stopped

  db_tg:
    image: postgres:17
    environment:
      POSTGRES_DB: ${DATABASE_TG_NAME}
      POSTGRES_USER: ${DATABASE_TG_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_TG_PASSWORD}
    command: postgres -c listen_addresses='*'
    volumes:
      - postgres_data_tg:/var/lib/postgresql/data
    env_file:
      - .env
    networks:
      - app_network

  tg_bot:
    build: ./tg_bot
    container_name: telegram_bot
    volumes:
      - ./tg_bot:/app
    environment:
      REDIS_URL: "redis://redis:6379/0"
      BASE_URL: ${BASE_URL}
      BOT_TOKEN: ${TELEGRAM_API_TOKEN}
      CHAT_ID: ${TELEGRAM_CHAT_ID}

      DATABASE_ENGINE: ${DATABASE_ENGINE}
      DATABASE_NAME: ${DATABASE_TG_NAME}
      DATABASE_USERNAME: ${DATABASE_TG_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_TG_PASSWORD}
      DATABASE_HOST: db_tg
      DATABASE_PORT: ${DATABASE_TG_PORT}
    env_file:
      - .env
    depends_on:
      - redis
      - db_tg
    networks:
      - app_network
    restart: unless-stopped

  tg_celery_worker:
    build: ./tg_bot
    container_name: tg_bot_celery_worker
    command: celery -A src.celery_app worker --loglevel=info --concurrency=4
    volumes:
      - ./tg_bot:/app
    environment:
      REDIS_URL: "redis://redis:6379/0"
      BASE_URL: ${BASE_URL}
      BOT_TOKEN: ${TELEGRAM_API_TOKEN}
      CHAT_ID: ${TELEGRAM_CHAT_ID}

      DATABASE_ENGINE: ${DATABASE_ENGINE}
      DATABASE_NAME: ${DATABASE_TG_NAME}
      DATABASE_USERNAME: ${DATABASE_TG_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_TG_PASSWORD}
      DATABASE_HOST: db_tg
      DATABASE_PORT: ${DATABASE_TG_PORT}
    env_file:
      - .env
    depends_on:
      - redis
      - tg_bot
    networks:
      - app_network
    restart: unless-stopped

  frontends:
    build: ./frontends
    restart: always
    networks:
      - app_network
    ports:
      - "85:80"
    environment:
      APP_PREFIX: PREFIX_FRONTEND
      ASSET_DIR: /usr/share/nginx/html
      PREFIX_FRONTEND_BACKEND_URL: ${BASE_URL}
    env_file:
      - .env
  nginx_proxy:
    build: ./proxy
    container_name: nginx_proxy
    ports:
      - "80:80"
    depends_on:
      - backend_auth
      - frontends
    networks:
      - app_network
    restart: unless-stopped
    
volumes:
  redis_data:
  postgres_data_auth:
  postgres_data_tg:

networks:
  app_network:
    driver: bridge